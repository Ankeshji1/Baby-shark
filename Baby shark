<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shark Coin Miner</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&family=Rubik:wght@700&display=swap" rel="stylesheet">
    <style>
        :root {
            --shark-blue: #00B4D8;
            --shark-pink: #FF85A2;
            --shark-yellow: #FFD166;
            --shark-dark: #0A2463;
            --ocean-deep: #001F3F;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, var(--ocean-deep) 0%, var(--shark-dark) 100%);
            color: white;
            min-height: 100vh;
            overflow-x: hidden;
            touch-action: manipulation;
        }

        .container {
            max-width: 100%;
            padding: 20px;
            position: relative;
        }

        header {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px 20px;
            background: rgba(10, 36, 99, 0.6);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        h1 {
            font-family: 'Rubik', sans-serif;
            font-size: 1.8rem;
            background: linear-gradient(to right, var(--shark-blue), var(--shark-pink));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 20px;
        }

        .stat-box {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            border: 1px solid rgba(0, 180, 216, 0.2);
            transition: all 0.3s ease;
        }

        .stat-label {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--shark-blue);
        }

        .mine-area {
            position: relative;
            height: 40vh;
            min-height: 300px;
            background: rgba(0, 180, 216, 0.05);
            border-radius: 20px;
            margin-bottom: 20px;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.5);
            border: 2px solid rgba(0, 180, 216, 0.15);
            touch-action: manipulation;
        }

        #shark {
            font-size: 120px;
            cursor: pointer;
            transition: all 0.1s;
            position: relative;
            z-index: 10;
            animation: pulse 2s infinite ease-in-out;
            transform: rotateY(180deg);
            user-select: none;
            -webkit-user-select: none;
        }

        @keyframes pulse {
            0%, 100% { transform: rotateY(180deg) scale(1); }
            50% { transform: rotateY(180deg) scale(1.1); }
        }

        .bubble {
            position: absolute;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 50%;
            pointer-events: none;
            z-index: 1;
            animation: float-up linear forwards;
        }

        @keyframes float-up {
            to {
                transform: translateY(-100px) scale(0.5);
                opacity: 0;
            }
        }

        .tap-text {
            position: absolute;
            font-weight: bold;
            color: var(--shark-yellow);
            pointer-events: none;
            z-index: 5;
            text-shadow: 0 0 5px rgba(0, 0, 0, 0.8);
            animation: float-up 1s forwards;
        }

        .buy-options {
            background: rgba(255, 133, 162, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--shark-pink);
            backdrop-filter: blur(5px);
        }

        .buy-title {
            font-family: 'Rubik', sans-serif;
            color: var(--shark-pink);
            margin-bottom: 15px;
            font-size: 1.3rem;
            text-align: center;
        }

        .buy-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
        }

        .buy-option {
            background: rgba(0, 180, 216, 0.1);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            transition: all 0.2s;
            border: 1px solid rgba(0, 180, 216, 0.2);
        }

        .buy-btn {
            background: linear-gradient(to right, var(--shark-blue), var(--shark-pink));
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            margin-top: 8px;
            transition: all 0.2s;
        }

        .withdraw-section {
            background: rgba(255, 209, 102, 0.1);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid var(--shark-yellow);
            backdrop-filter: blur(5px);
        }

        .chain-selector {
            display: flex;
            margin-bottom: 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            overflow: hidden;
        }

        .chain-option {
            flex: 1;
            text-align: center;
            padding: 10px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .chain-option.active {
            background: var(--shark-yellow);
            color: var(--shark-dark);
            font-weight: bold;
        }

        .withdraw-form input {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 8px;
            padding: 12px;
            color: white;
            width: 100%;
            margin-bottom: 10px;
        }

        .withdraw-btn {
            background: linear-gradient(to right, var(--shark-yellow), #FFB347);
            color: var(--shark-dark);
            border: none;
            border-radius: 8px;
            padding: 12px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            transition: all 0.2s;
        }

        .withdraw-info {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
            margin-top: 10px;
            text-align: center;
        }

        /* Touch zone for better tapping */
        .touch-zone {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 20;
        }

        /* Responsive adjustments */
        @media (max-width: 500px) {
            .stats-container {
                grid-template-columns: 1fr;
            }
            
            #shark {
                font-size: 100px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>SHARK COIN MINER</h1>
        </header>
        
        <div class="stats-container">
            <div class="stat-box">
                <div class="stat-label">Shark Coins</div>
                <div class="stat-value" id="coins">0</div>
            </div>
            <div class="stat-box">
                <div class="stat-label">Per Tap</div>
                <div class="stat-value" id="per-tap">1</div>
            </div>
            <div class="stat-box">
                <div class="stat-label">Per Second</div>
                <div class="stat-value" id="per-second">0</div>
            </div>
        </div>
        
        <div class="mine-area">
            <div id="shark">ðŸ¦ˆ</div>
            <div class="touch-zone" id="touch-zone"></div>
        </div>
        
        <div class="buy-options">
            <div class="buy-title">BUY SHARK COINS</div>
            
            <div class="buy-grid">
                <div class="buy-option">
                    <div class="option-name">10,000 Coins</div>
                    <div class="option-price">1 USDT</div>
                    <button class="buy-btn" onclick="buyCoins(10000, 1)">BUY</button>
                </div>
                
                <div class="buy-option">
                    <div class="option-name">50,000 Coins</div>
                    <div class="option-price">5 USDT</div>
                    <button class="buy-btn" onclick="buyCoins(50000, 5)">BUY</button>
                </div>
                
                <div class="buy-option">
                    <div class="option-name">200,000 Coins</div>
                    <div class="option-price">20 USDT</div>
                    <button class="buy-btn" onclick="buyCoins(200000, 20)">BUY</button>
                </div>
            </div>
        </div>
        
        <div class="withdraw-section">
            <div class="buy-title">WITHDRAW EARNINGS</div>
            
            <div class="chain-selector">
                <div class="chain-option active" onclick="selectChain('ton')">TON</div>
                <div class="chain-option" onclick="selectChain('sol')">SOLANA</div>
            </div>
            
            <div class="withdraw-form">
                <input type="text" id="wallet-address" placeholder="Your Wallet Address">
                <input type="number" id="withdraw-amount" placeholder="Amount to withdraw">
                <button class="withdraw-btn" onclick="withdraw()">WITHDRAW</button>
            </div>
            
            <div class="withdraw-info">
                Minimum withdrawal: 1,000 coins<br>
                Processing fee: 5% (TON/SOL network fees)
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const DEV_WALLET = "0x5ea51967438915bb2e55eefc0b88ac557669b555";
        const DEV_CHAIN = "BEP20";

        // Game state
        const game = {
            coins: 0,
            perTap: 1,
            perSecond: 0,
            selectedChain: 'ton',
            lastUpdate: Date.now()
        };

        // DOM elements
        const coinsElement = document.getElementById('coins');
        const perTapElement = document.getElementById('per-tap');
        const perSecondElement = document.getElementById('per-second');
        const sharkElement = document.getElementById('shark');
        const touchZone = document.getElementById('touch-zone');

        // Initialize Telegram WebApp
        const tg = window.Telegram.WebApp;
        tg.expand();

        // FIXED: Tap event handlers for both mouse and touch
        touchZone.addEventListener('mousedown', handleTap);
        touchZone.addEventListener('touchstart', handleTap, { passive: true });

        // Handle tap event
        function handleTap(e) {
            e.preventDefault();
            
            // Get tap position
            const rect = sharkElement.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;
            
            // Add coins
            game.coins += game.perTap;
            updateUI();
            
            // Create visual effects
            createTapEffect(game.perTap, x, y);
            createBubbles(x, y, 3);
            
            // Bite animation
            sharkElement.style.transform = 'rotateY(180deg) scale(0.95)';
            setTimeout(() => { 
                sharkElement.style.transform = 'rotateY(180deg) scale(1)'; 
            }, 100);
        }

        // Add coins function
        function addCoins(amount) {
            game.coins += amount;
            updateUI();
        }

        // Create tap effect
        function createTapEffect(amount, x, y) {
            const effect = document.createElement('div');
            effect.className = 'tap-text';
            effect.textContent = `+${amount}`;
            effect.style.left = `${x}px`;
            effect.style.top = `${y}px`;
            sharkElement.parentElement.appendChild(effect);
            
            setTimeout(() => {
                effect.remove();
            }, 1000);
        }

        // Create bubbles
        function createBubbles(x, y, count) {
            for (let i = 0; i < count; i++) {
                const bubble = document.createElement('div');
                bubble.className = 'bubble';
                
                const size = Math.random() * 10 + 5;
                bubble.style.width = `${size}px`;
                bubble.style.height = `${size}px`;
                
                const angle = Math.random() * Math.PI * 2;
                const distance = Math.random() * 30 + 10;
                const startX = x + Math.cos(angle) * distance;
                const startY = y + Math.sin(angle) * distance;
                
                bubble.style.left = `${startX}px`;
                bubble.style.top = `${startY}px`;
                
                const duration = Math.random() * 1000 + 500;
                bubble.style.animationDuration = `${duration}ms`;
                
                sharkElement.parentElement.appendChild(bubble);
                
                setTimeout(() => {
                    bubble.remove();
                }, duration);
            }
        }

        // Buy coins with USDT (100% to dev wallet)
        async function buyCoins(coinAmount, usdtAmount) {
            try {
                const confirmed = await tg.showConfirm(
                    `Buy ${coinAmount.toLocaleString()} Shark Coins for ${usdtAmount} USDT?\n\n` +
                    `This payment will be processed on ${DEV_CHAIN} network`
                );
                
                if (!confirmed) return;
                
                // In production: Process USDT payment to DEV_WALLET
                // For demo, we'll just credit the coins
                addCoins(coinAmount);
                
                tg.showAlert(
                    `Payment Successful!\n\n` +
                    `${usdtAmount} USDT sent to developer wallet\n` +
                    `${coinAmount.toLocaleString()} Shark Coins added to your account`
                );
                
            } catch (error) {
                tg.showAlert("Payment failed: " + error.message);
            }
        }

        // Select blockchain
        function selectChain(chain) {
            game.selectedChain = chain;
            document.querySelectorAll('.chain-option').forEach(el => {
                el.classList.toggle('active', el.textContent.toLowerCase().includes(chain));
            });
        }

        // Withdraw function
        async function withdraw() {
            const address = document.getElementById('wallet-address').value.trim();
            const amount = parseFloat(document.getElementById('withdraw-amount').value);
            
            if (!address) {
                tg.showAlert("Please enter your wallet address");
                return;
            }
            
            // Basic chain-specific address validation
            if (game.selectedChain === 'ton' && !address.match(/^[a-zA-Z0-9_-]{48}$/)) {
                tg.showAlert("Please enter a valid TON wallet address");
                return;
            }
            
            if (game.selectedChain === 'sol' && !address.match(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)) {
                tg.showAlert("Please enter a valid Solana wallet address");
                return;
            }
            
            if (isNaN(amount)) {
                tg.showAlert("Please enter a valid amount");
                return;
            }
            
            if (amount < 1000) {
                tg.showAlert("Minimum withdrawal is 1,000 coins");
                return;
            }
            
            if (amount > game.coins) {
                tg.showAlert("Not enough Shark Coins");
                return;
            }
            
            try {
                const confirmed = await tg.showConfirm(
                    `Withdraw ${amount} coins to your ${game.selectedChain.toUpperCase()} wallet?\n\n` +
                    `Address: ${address.substring(0, 6)}...${address.substring(address.length-4)}\n` +
                    `Network fee: 5%`
                );
                
                if (!confirmed) return;
                
                // In production: Process withdrawal here
                const fee = amount * 0.05;
                const received = amount - fee;
                
                game.coins -= amount;
                updateUI();
                
                tg.showAlert(
                    `Withdrawal processing!\n\n` +
                    `${amount} coins sent to ${game.selectedChain.toUpperCase()} network\n` +
                    `You will receive: ${received.toFixed(0)} coins\n` +
                    `Network fee: ${fee.toFixed(0)} coins`
                );
                
            } catch (error) {
                tg.showAlert("Withdrawal failed: " + error.message);
            }
        }

        // Update UI
        function updateUI() {
            coinsElement.textContent = Math.floor(game.coins).toLocaleString();
            perTapElement.textContent = game.perTap.toLocaleString();
            perSecondElement.textContent = game.perSecond.toFixed(1);
        }

        // Game loop for passive income
        function gameLoop() {
            const now = Date.now();
            const deltaTime = (now - game.lastUpdate) / 1000;
            game.lastUpdate = now;
            
            if (game.perSecond > 0) {
                const passiveIncome = game.perSecond * deltaTime;
                game.coins += passiveIncome;
                updateUI();
            }
            
            requestAnimationFrame(gameLoop);
        }

        // Initialize game
        game.lastUpdate = Date.now();
        updateUI();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
